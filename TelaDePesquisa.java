import java.awt.*; // Importa classes para a interface gr√°fica.
import java.awt.event.*; // Importa classes para tratamento de eventos.
import javax.swing.*; // Importa classes para componentes da interface gr√°fica.
// import java.sql.*; // Importa√ß√£o comentada para conex√£o com banco de dados.

public class TelaDePesquisa extends JFrame {
    // Declara√ß√£o de componentes da interface.
    public static JLabel lblPesquisa; // R√≥tulo para a pesquisa.
    public static JTextField txtPesquisa; // Campo de texto para entrada da pesquisa.

    public static JLabel lblId; // R√≥tulo para o ID.
    public static JTextField txtId; // Campo de texto para exibi√ß√£o do ID.

    public static JLabel lblNome; // R√≥tulo para o Nome.
    public static JTextField txtNome; // Campo de texto para exibi√ß√£o do Nome.

    public static JLabel lblEmail; // R√≥tulo para o Email.
    public static JTextField txtEmail; // Campo de texto para exibi√ß√£o do Email.

    public static JButton btnPesquisar; // Bot√£o para iniciar a pesquisa.
    public static JButton btnPrimeiro; // Bot√£o para ir ao primeiro registro.
    public static JButton btnAnterior; // Bot√£o para ir ao registro anterior.
    public static JButton btnProximo; // Bot√£o para ir ao pr√≥ximo registro.
    public static JButton btnUltimo; // Bot√£o para ir ao √∫ltimo registro.

    public static JLabel lblNotificacoes; // R√≥tulo para mensagens de notifica√ß√£o.

    public static int tamanhoInputs = 20; // Define o tamanho dos campos de entrada.
    public static String txtUsuario = ""; // Armazena a entrada do usu√°rio.

    public TelaDePesquisa() {
        super("Tela de Pesquisa"); // Define o t√≠tulo da janela.
        setLayout(new GridLayout(7, 1, 5, 5)); // Define o layout da tela.

        // Cria√ß√£o do painel para a linha de pesquisa.
        JPanel linha_lblPesquisa = new JPanel(new GridLayout(1, 2));
        lblPesquisa = new JLabel("Pesquisa:", SwingConstants.CENTER); // R√≥tulo de pesquisa.
        linha_lblPesquisa.add(lblPesquisa);

        // Bot√£o de pesquisa.
        btnPesquisar = new JButton("üîç");
        btnPesquisar.setToolTipText("Pesquisar"); // Dica ao passar o mouse.
        btnPesquisar.setEnabled(false); // Bot√£o inicialmente desabilitado.
        linha_lblPesquisa.add(btnPesquisar);
        add(linha_lblPesquisa); // Adiciona o painel √† tela.

        // Cria√ß√£o do painel para a entrada da pesquisa.
        JPanel linha_inputPesquisa = new JPanel(new GridLayout(1, 1));
        txtPesquisa = new JTextField(tamanhoInputs); // Campo de texto para pesquisa.
        linha_inputPesquisa.add(txtPesquisa);
        add(linha_inputPesquisa); // Adiciona o painel √† tela.

        // Cria√ß√£o do painel para exibir o ID.
        JPanel linha_id = new JPanel(new GridLayout(1, 2));
        lblId = new JLabel("Id:", SwingConstants.RIGHT); // R√≥tulo do ID.
        linha_id.add(lblId);
        txtId = new JTextField(tamanhoInputs); // Campo para ID.
        txtId.setEnabled(false); // Campo n√£o edit√°vel.
        linha_id.add(txtId);
        add(linha_id); // Adiciona o painel √† tela.

        // Cria√ß√£o do painel para exibir o Nome.
        JPanel linha_nome = new JPanel(new GridLayout(1, 2));
        lblNome = new JLabel("Nome:", SwingConstants.RIGHT); // R√≥tulo do Nome.
        linha_nome.add(lblNome);
        txtNome = new JTextField(tamanhoInputs); // Campo para Nome.
        txtNome.setEditable(false); // Campo n√£o edit√°vel.
        linha_nome.add(txtNome);
        add(linha_nome); // Adiciona o painel √† tela.

        // Cria√ß√£o do painel para exibir o Email.
        JPanel linha_email = new JPanel(new GridLayout(1, 2));
        lblEmail = new JLabel("Email:", SwingConstants.RIGHT); // R√≥tulo do Email.
        linha_email.add(lblEmail);
        txtEmail = new JTextField(10); // Campo para Email.
        txtEmail.setEditable(false); // Campo n√£o edit√°vel.
        linha_email.add(txtEmail);
        add(linha_email); // Adiciona o painel √† tela.

        // Cria√ß√£o do painel para os bot√µes de navega√ß√£o.
        JPanel linha_botoes = new JPanel(new GridLayout(1, 4));
        btnPrimeiro = new JButton("<<");
        btnPrimeiro.setEnabled(false); // Bot√£o inicialmente desabilitado.
        linha_botoes.add(btnPrimeiro);

        btnAnterior = new JButton("<");
        btnAnterior.setEnabled(false); // Bot√£o inicialmente desabilitado.
        linha_botoes.add(btnAnterior);

        btnProximo = new JButton(">");
        btnProximo.setEnabled(false); // Bot√£o inicialmente desabilitado.
        linha_botoes.add(btnProximo);

        btnUltimo = new JButton(">>");
        btnUltimo.setEnabled(false); // Bot√£o inicialmente desabilitado.
        linha_botoes.add(btnUltimo);
        add(linha_botoes); // Adiciona o painel √† tela.

        // Cria√ß√£o do painel para mensagens de notifica√ß√£o.
        JPanel linha_notificacoes = new JPanel(new GridLayout(1, 1));
        lblNotificacoes = new JLabel("Notifica√ß√µes", SwingConstants.CENTER); // R√≥tulo de notifica√ß√µes.
        linha_notificacoes.add(lblNotificacoes);
        add(linha_notificacoes); // Adiciona o painel √† tela.

        // Adiciona a√ß√£o ao bot√£o de pesquisar.
        btnPesquisar.addActionListener(
            new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent event) {
                    // Verifica se o campo de pesquisa est√° vazio.
                    if (txtPesquisa.getText().trim().length() <= 0) {
                        lblNotificacoes.setText(setHtmlFormat("Por favor, digite algo e tente novamente.")); // Mensagem de erro.
                        txtPesquisa.requestFocus(); // Foca no campo de pesquisa.
                        return;
                    } else {
                        NavegadorDeRegistro.pesquisar(); // Chama o m√©todo de pesquisa.
                    }
                }
            }
        );

        // Adiciona a√ß√£o ao bot√£o de primeiro registro.
        btnPrimeiro.addActionListener(
            new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent event) {
                    if (ntfCampoVazio() == false) { // Verifica se o campo de pesquisa n√£o est√° vazio.
                        NavegadorDeRegistro.primeiroRegistro(); // Chama o m√©todo para ir ao primeiro registro.
                    }
                }
            }
        );

        // Adiciona a√ß√£o ao bot√£o de registro anterior.
        btnAnterior.addActionListener(
            new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent event) {
                    if (ntfCampoVazio() == false) { // Verifica se o campo de pesquisa n√£o est√° vazio.
                        NavegadorDeRegistro.registroAnterior(); // Chama o m√©todo para ir ao registro anterior.
                    }
                }
            }
        );

        // Adiciona a√ß√£o ao bot√£o de pr√≥ximo registro.
        btnProximo.addActionListener(
            new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent event) {
                    if (ntfCampoVazio() == false) { // Verifica se o campo de pesquisa n√£o est√° vazio.
                        NavegadorDeRegistro.proximoRegistro(); // Chama o m√©todo para ir ao pr√≥ximo registro.
                    }
                }
            }
        );

        // Adiciona a√ß√£o ao bot√£o de √∫ltimo registro.
        btnUltimo.addActionListener(
            new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent event) {
                    if (ntfCampoVazio() == false) { // Verifica se o campo de pesquisa n√£o est√° vazio.
                        NavegadorDeRegistro.ultimoRegistro(); // Chama o m√©todo para ir ao √∫ltimo registro.
                    }
                }
            }
        );

        // Adiciona um listener para o campo de pesquisa.
        txtPesquisa.addKeyListener(
            new KeyAdapter() {
                @Override
                public void keyReleased(KeyEvent e) {
                    // Verifica se o texto mudou e se o campo n√£o est√° vazio.
                    if (txtPesquisa.getText().trim().equals(txtUsuario) == false && txtPesquisa.getText().trim().length() > 0) {
                        if (e.getKeyCode() == 10) { // Se a tecla Enter foi pressionada.
                            NavegadorDeRegistro.pesquisar(); // Chama o m√©todo de pesquisa.
                        }
                    } else {
                        limparCampos("Digite algo para continuar."); // Limpa os campos se a pesquisa estiver vazia.
                    }
                    btnPesquisar.setEnabled(true); // Habilita o bot√£o de pesquisa.
                }
            }
        );

        // Configura√ß√µes da janela.
        setSize(250, 300); // Define o tamanho da janela.
        setVisible(true); // Torna a janela vis√≠vel.
        txtPesquisa.requestFocus(); // Foca no campo de pesquisa.
    }

    // M√©todo para verificar se o campo de pesquisa est√° vazio.
    public static boolean ntfCampoVazio() {
        if (txtPesquisa.getText().trim().length() <= 0) {
            lblNotificacoes.setText(setHtmlFormat("Ops! Campo vazio. Por favor, digite algo e tente novamente.")); // Mensagem de erro.
            txtPesquisa.requestFocus(); // Foca no campo de pesquisa.
            return true; // Retorna verdadeiro se o campo est√° vazio.
        } else {
            return false; // Retorna falso se o campo n√£o est√° vazio.
        }
    }

    // M√©todo para limpar os campos de entrada.
    public static void limparCampos(String notificacao) {
        btnPesquisar.setEnabled(false); // Desabilita o bot√£o de pesquisa.
        txtId.setText(""); // Limpa o campo ID.
        txtNome.setText(""); // Limpa o campo Nome.
        txtEmail.setText(""); // Limpa o campo Email.
        btnPrimeiro.setEnabled(false); // Desabilita o bot√£o de primeiro registro.
        btnAnterior.setEnabled(false); // Desabilita o bot√£o de registro anterior.
        btnProximo.setEnabled(false); // Desabilita o bot√£o de pr√≥ximo registro.
        btnUltimo.setEnabled(false); // Desabilita o bot√£o de √∫ltimo registro.
        if (notificacao.trim().length() > 0) {
            lblNotificacoes.setText(setHtmlFormat(notificacao)); // Exibe mensagem de notifica√ß√£o.
        }
    }

    // M√©todo para formatar texto em HTML.
    public static String setHtmlFormat(String strTexto) {
        return "<html><body>" + strTexto + "</body></html>"; // Retorna texto formatado em HTML.
    }

    // M√©todo principal para execu√ß√£o do programa.
    public static void main(String[] args) {
        TelaDePesquisa appTelaDePesquisa = new TelaDePesquisa(); // Cria uma inst√¢ncia da tela de pesquisa.
        appTelaDePesquisa.setDefaultCloseOperation(EXIT_ON_CLOSE); // Define a opera√ß√£o ao fechar a janela.
    }
}
